plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'com.diffplug.spotless' version '6.25.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
    maven {
        url "https://maven.parchmentmc.net/"
        content {
            includeGroup "org.parchmentmc.data"
        }
    }
    maven {
        url "https://maven.shedaniel.me"
        content {
            includeGroup "me.sargunvohra.mcmods"
            includeGroup "me.shedaniel.cloth"
            includeGroup "me.shedaniel"
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven.terraformersmc.com"
        content {
            includeGroup "com.terraformersmc"
            includeGroup "dev.emi"
        }
    }
    maven {
        url 'https://maven.bai.lol'
        content {
            includeGroup "lol.bai"
            includeGroup "mcp.mobius.waila"
        }
    }
    maven {
        name 'modmaven'
        url "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.08.13@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    include modImplementation("teamreborn:energy:${project.energy_version}")

    if (project.runtime_itemlist_mod == "jei") {
        modImplementation("mezz.jei:jei-${project.jei_minecraft_version}-fabric:${project.jei_version}") {
            exclude group: "mezz.jei"
        }
    } else {
        modCompileOnly("mezz.jei:jei-${project.jei_minecraft_version}-fabric:${project.jei_version}") {
            exclude group: "mezz.jei"
        }
    }

    if (project.runtime_itemlist_mod == "rei") {
        modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }
    } else {
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    }

    if (project.runtime_itemlist_mod == "emi") {
        modImplementation("dev.emi:emi-fabric:${project.emi_version}+${project.emi_minecraft_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    } else {
        modCompileOnly("dev.emi:emi-fabric:${project.emi_version}+${project.emi_minecraft_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    }

    if (!(project.runtime_itemlist_mod in ["jei", "rei", "emi"])) {
        throw new GradleException("Invalid runtime_itemlist_mod value: " + project.runtime_itemlist_mod)
    }

    modImplementation("curse.maven:jade-324717:${project.jade_file_id}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

loom {
    splitEnvironmentSourceSets()
}

sourceSets {
    main {
        resources {
            srcDir "src/generated/resources"
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/moderndynamics.accesswidener")

    mods {
        moderndynamics {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        datagenClient {
            client()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"

            ideConfigGenerated = true
            runDir "build/datagen"
        }

        // Use to run the tests
        gametest {
            server()
            name "Game Test"
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
    }
}

test.dependsOn runGametest

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        importOrder()

        removeUnusedImports()

        eclipse().configFile('eclipse-format.xml')

        indentWithSpaces()
        endWithNewline()
        licenseHeaderFile 'license_header.java'
    }
    format 'json', {
        target 'src/**/lang/*.json'
        addStep(JsonOrderStep.create())
    }
}

import com.diffplug.spotless.FormatterFunc
import com.diffplug.spotless.FormatterStep
import com.google.gson.Gson
import com.google.gson.GsonBuilder

final class JsonOrderStep {
    private JsonOrderStep() {}
    private static final Gson GSON = new GsonBuilder().disableHtmlEscaping().setLenient().setPrettyPrinting().create();

    static FormatterStep create() {
        return FormatterStep.create(
                'jsonOrderStep',
                new State(),
                {
                    new FormatterFunc() {
                        String apply(String input) {
                            TreeMap<String, Object> jsonMap = GSON.fromJson(input, TreeMap.class);
                            String sortedJson = GSON.toJson(jsonMap);
                            String prettyPrinted = sortedJson.replace('  "', '    "').replace('\\u0027', '\'');
                            return prettyPrinted;
                        }
                    }
                },
        );
    }

    private static final class State implements Serializable {
        private static final long serialVersionUID = 1L;

        private final int formatVersion = 1;
    }
}
